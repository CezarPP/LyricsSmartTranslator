openapi: 3.0.0
info:
  title: API
  version: 1.0-oas3
servers:
  - url: https://lyricssmarttranslator.com/api
paths:
  /songs:
    get:
      tags:
        - Songs
      summary: Retrieves all songs or filtered set of songs
      parameters:
        - in: query
          name: filter
          schema:
            type: string
            enum: [ newest, mostCommented, mostViewed ]
          description: Optional filter to apply on the songs.
        - in: query
          name: limit
          schema:
            type: integer
            default: 30
          description: Optional limit to the number of songs to return. Default is 30.
      responses:
        '200':
          description: A list of songs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Song'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Songs
      summary: Create a new song
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SongInput'
      responses:
        '200':
          description: Created song
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Song'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /songs/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
    get:
      tags:
        - Songs
      summary: Get a song by id
      responses:
        '200':
          description: A single song
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Song'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - Songs
      summary: Update a song
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SongUpdateInput'
      responses:
        '200':
          description: Song updated successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Songs
      summary: Delete a song
      responses:
        '200':
          description: Song deleted successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /images:
    get:
      tags:
        - Images
      summary: Retrieves all images
      responses:
        '200':
          description: A list of images
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ImageModel'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /{id}:
    get:
      tags:
        - Images
      summary: Retrieves an image by ID
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: The ID of the image.
      responses:
        '200':
          description: The image
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageModel'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Images
      summary: Uploads a new image
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: base64
                  description: The base64 encoded image data.
      responses:
        '200':
          description: Image uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageModel'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /translations/{id}:
    get:
      tags:
        - Translations
      summary: "Get a translation by its ID"
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: "Unique ID of the translation"
      responses:
        '200':
          description: "Translation retrieved"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Translation"
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags:
        - Translations
      summary: "Update an existing translation"
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: "ID of the translation"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TranslationUpdate"
      responses:
        '200':
          description: "Translation updated"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - Translations
      summary: "Delete a translation by its ID"
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: "Unique ID of the translation"
      responses:
        '200':
          description: "Translation deleted successfully"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /translations:
    get:
      tags:
        - Translations
      summary: "Get all translations, or filter translations by songId or username"
      parameters:
        - in: query
          name: songId
          schema:
            type: integer
          description: "Filter translations by songId"
        - in: query
          name: username
          schema:
            type: string
          description: "Filter translations by username"
      responses:
        '200':
          description: "A list of translations"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Translation"
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
    post:
      tags:
        - Translations
      summary: "Add a new translation"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Translation"
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '409':
          $ref: '#/components/responses/ConflictError'

  /annotations:
    get:
      tags:
        - Annotations
      summary: "Get all annotations or filter by translationId and reviewed"
      parameters:
        - in: query
          name: translationId
          schema:
            type: integer
          description: "Filter annotations by translationId"
        - in: query
          name: reviewed
          schema:
            type: boolean
          description: "Filter annotations by reviewed status"
      responses:
        '200':
          description: "A list of annotations"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Annotation"
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
    post:
      tags:
        - Annotations
      summary: "Create a new annotation"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Annotation"
      responses:
        '201':
          description: "Annotation created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Annotation"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '409':
          $ref: '#/components/responses/ConflictError'

  /annotations/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
        description: "ID of the annotation"
    get:
      tags:
        - Annotations
      summary: "Get a single annotation by ID"
      responses:
        '200':
          description: "A single annotation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Annotation"
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags:
        - Annotations
      summary: "Update an existing annotation"
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: "ID of the annotation"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AnnotationUpdate"
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - Annotations
      summary: "Delete an existing annotation"
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

components:
  schemas:
    Song:
      type: object
      properties:
        id:
          type: integer
        primary_translation:
          type: integer
        imageId:
          type: integer
        artist:
          type: string
        title:
          type: string
        link:
          type: string
    SongInput:
      type: object
      properties:
        title:
          type: string
        artist:
          type: string
        lyrics:
          type: string
        description:
          type: string
        language:
          type: string
        youtube-link:
          type: string
        imageId:
          type: integer
    SongUpdateInput:
      type: object
      properties:
        title:
          type: string
        artist:
          type: string
        youtube-link:
          type: string
    ImageModel:
      type: object
      properties:
        id:
          type: integer
          description: The ID of the image.
        link:
          type: string
          description: The link to the image.
        ext:
          type: string
          description: The extension of the image file.
      required:
        - id
        - link
        - ext
    Translation:
      type: object
      properties:
        id:
          type: integer
        songId:
          type: integer
        userId:
          type: integer
        language:
          type: string
        description:
          type: string
        lyrics:
          type: string
        no_views:
          type: integer
        time:
          type: string
          format: date-time
    TranslationUpdate:
      type: object
      properties:
        lyrics:
          type: string
          description: "The updated lyrics of the song translation"
        description:
          type: string
          description: "The updated description of the translation"
    Annotation:
      type: object
      properties:
        id:
          type: integer
        userId:
          type: integer
        translationId:
          type: integer
        beginPos:
          type: integer
        endPos:
          type: integer
        content:
          type: string
        reviewed:
          type: boolean
    AnnotationUpdate:
      type: object
      properties:
        content:
          type: string
          description: "The updated content of the annotation"
        reviewed:
          type: boolean
          description: "Whether the annotation is reviewed. Only an admin user can set this to true. If user is not an admin, this will be automatically set to false, regardless of the provided value."
  responses:
    Success:
      description: Operation Successfully Completed
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
    NotFound:
      description: Not Found
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
    UnprocessableEntity:
      description: Unprocessable Entity
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
    ConflictError:
      description: Conflict Error
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string