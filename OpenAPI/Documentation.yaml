openapi: 3.0.0
info:
  title: API
  version: 1.0.1
servers:
  - url: https://lyricssmarttranslator.com/api
paths:
  /songs:
    get:
      tags:
        - Songs
      summary: Retrieves all songs or filtered set of songs
      parameters:
        - in: query
          name: filter
          schema:
            type: string
            enum: [ newest, mostCommented, mostViewed ]
          description: Optional filter to apply on the songs.
        - in: query
          name: limit
          schema:
            type: integer
            default: 30
          description: Optional limit to the number of songs to return. Default is 30.
      responses:
        '200':
          description: A list of songs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Song'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Songs
      summary: Create a new song
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SongInput'
      responses:
        '200':
          description: Created song
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Song'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - cookieAuth: [ ]
  /songs/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
    get:
      tags:
        - Songs
      summary: Get a song by id
      responses:
        '200':
          description: A single song
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Song'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - Songs
      summary: Update a song
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SongUpdateInput'
      responses:
        '200':
          description: Song updated successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - cookieAuth: [ ]
    delete:
      tags:
        - Songs
      summary: Delete a song
      responses:
        '200':
          description: Song deleted successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - cookieAuth: [ ]
  /images:
    get:
      tags:
        - Images
      summary: Retrieves all images
      responses:
        '200':
          description: A list of images
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ImageModel'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Images
      summary: Uploads a new image
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: base64
                  description: The base64 encoded image data.
      responses:
        '200':
          description: Image uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageModel'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /images/{id}:
    get:
      tags:
        - Images
      summary: Retrieves an image by ID
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: The ID of the image.
      responses:
        '200':
          description: The image
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageModel'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /translations/{id}:
    get:
      tags:
        - Translations
      summary: "Get a translation by its ID"
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: "Unique ID of the translation"
      responses:
        '200':
          description: "Translation retrieved"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Translation"
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags:
        - Translations
      summary: "Update an existing translation"
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: "ID of the translation"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TranslationUpdate"
      responses:
        '200':
          description: "Translation updated"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - cookieAuth: [ ]
    delete:
      tags:
        - Translations
      summary: "Delete a translation by its ID"
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: "Unique ID of the translation"
      responses:
        '200':
          description: "Translation deleted successfully"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - cookieAuth: [ ]
  /translations:
    get:
      tags:
        - Translations
      summary: "Get all translations, or filter translations by songId or username"
      parameters:
        - in: query
          name: songId
          schema:
            type: integer
          description: "Filter translations by songId"
        - in: query
          name: username
          schema:
            type: string
          description: "Filter translations by username"
      responses:
        '200':
          description: "A list of translations"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Translation"
        '400':
          $ref: '#/components/responses/BadRequest'
    post:
      tags:
        - Translations
      summary: "Add a new translation"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Translation"
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '409':
          $ref: '#/components/responses/ConflictError'
      security:
        - cookieAuth: [ ]

  /annotations:
    get:
      tags:
        - Annotations
      summary: "Get all annotations or filter by translationId and reviewed"
      parameters:
        - in: query
          name: translationId
          schema:
            type: integer
          description: "Filter annotations by translationId"
        - in: query
          name: reviewed
          schema:
            type: integer
            enum: [ 0, 1 ]
          description: "Filter annotations by reviewed status"
      responses:
        '200':
          description: "A list of annotations"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Annotation"
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
    post:
      tags:
        - Annotations
      summary: "Create a new annotation"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Annotation"
      responses:
        '201':
          description: "Annotation created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Annotation"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '409':
          $ref: '#/components/responses/ConflictError'
      security:
        - cookieAuth: [ ]

  /annotations/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
        description: "ID of the annotation"
    get:
      tags:
        - Annotations
      summary: "Get a single annotation by ID"
      responses:
        '200':
          description: "A single annotation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Annotation"
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags:
        - Annotations
      summary: "Update an existing annotation"
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: "ID of the annotation"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AnnotationUpdate"
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - cookieAuth: [ ]
    delete:
      tags:
        - Annotations
      summary: "Delete an existing annotation"
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - cookieAuth: [ ]

  /user/login:
    post:
      summary: Log in a user and return the authentication cookie
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          headers:
            Set-Cookie:
              description: The authentication cookie
              schema:
                type: string
                example: jwt=eyJh9.eyJ1c.j1pAi; Path=/; Secure; HttpOnly;
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /user/logout:
    post:
      summary: Log out a user
      tags:
        - Users
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - cookieAuth: []

  /user/register:
    post:
      summary: Register a new user
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '200':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/ConflictError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /user/{username}:
    get:
      summary: Get user statistics by username
      tags:
        - Users
      parameters:
        - name: username
          in: path
          description: Username of the user
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserStats'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      summary: Update user profile
      tags:
        - Users
      parameters:
        - name: username
          in: path
          description: Username of the user to update
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateRequest'
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - cookieAuth: [ ]

    delete:
      summary: Delete a user
      tags:
        - Users
      parameters:
        - name: username
          in: path
          description: Username of the user to delete
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - cookieAuth: [ ]
  /user:
    get:
      summary: Get user statistics with optional filtering
      tags:
        - Users
      parameters:
        - name: filter
          in: query
          description: Filter option for active users (e.g., "mostActive")
          schema:
            type: string
            enum: [ mostActive ]
        - name: limit
          in: query
          description: Limit the number of results
          schema:
            type: integer
            minimum: 0
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserInfo'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /user/recommendations:
    get:
      summary: Get recommendations for the current logged in user
      tags:
        - Users
      parameters:
        - name: limit
          in: query
          description: Limit the number of results
          schema:
            type: integer
            minimum: 0
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Song'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - cookieAuth: []


  /recover:
    post:
      summary: Request password recovery
      tags:
        - Recover
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecoverRequest'
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/ConflictError'
        '500':
          $ref: '#/components/responses/InternalServerError'

    get:
      summary: Get all password recovery requests
      tags:
        - Recover
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Recover'
        '401':
          $ref: '#/components/responses/Unauthorized'
      security:
        - cookieAuth: [ ]

    put:
      summary: Recover password
      tags:
        - Recover
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecoverPasswordRequest'
      responses:
        '200':
          $ref: '#/components/responses/Success'

        '400':
          $ref: '#/components/responses/BadRequest'

        '404':
          $ref: '#/components/responses/NotFound'

        500:
          $ref: '#/components/responses/InternalServerError'

  /recover/{id}:
    delete:
      summary: Delete password recovery request
      tags:
        - Recover
      parameters:
        - name: id
          in: path
          description: Id of the password recovery request
          required: true
          schema:
            type: integer
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - cookieAuth: [ ]


  /comments:
    get:
      summary: Get all comments
      tags:
        - Comments
      parameters:
        - name: translationId
          in: query
          description: Optional. ID of the translation to filter comments by
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      summary: Create a new comment
      tags:
        - Comments
      requestBody:
        description: Comment object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentRequestBody'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentPostResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - cookieAuth: [ ]

  /comments/{id}:
    get:
      summary: Get comment by ID
      tags:
        - Comments
      parameters:
        - name: id
          in: path
          description: ID of the comment
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '400':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      summary: Update a comment
      tags:
        - Comments
      parameters:
        - name: id
          in: path
          description: ID of the comment
          required: true
          schema:
            type: integer
      requestBody:
        description: Updated comment content
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentPutRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - cookieAuth: [ ]

    delete:
      summary: Delete a comment by ID
      tags:
        - Comments
      parameters:
        - name: id
          in: path
          description: ID of the comment
          required: true
          schema:
            type: integer
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

      security:
        - cookieAuth: [ ]
components:
  schemas:
    Comment:
      type: object
      properties:
        id:
          type: integer
        userId:
          type: integer
        translationId:
          type: integer
        content:
          type: string
    CommentRequestBody:
      type: object
      properties:
        translationId:
          type: integer
        content:
          type: string
      required:
        - translationId
        - content
    CommentPostResponse:
      type: object
      properties:
        message:
          type: string
        id:
          type: integer
    CommentPutRequestBody:
      type: object
      properties:
        newContent:
          type: string
      required:
        - newContent
    RecoverRequest:
      type: object
      properties:
        email:
          type: string
      required:
        - email
    Recover:
      type: object
      properties:
        id:
          type: integer
        userId:
          type: integer
        email:
          type: string
        token:
          type: string
    RecoverPasswordRequest:
      type: object
      properties:
        token:
          type: string
        newPassword:
          type: string
      required:
        - token
        - newPassword
    LoginRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
      required:
        - username
        - password
    RegisterRequest:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
        password:
          type: string
      required:
        - username
        - email
        - password
    RegisterResponse:
      type: object
      properties:
        message:
          type: string
        id:
          type: integer
          format: int64
      required:
        - message
        - id
    UserStats:
      type: object
      properties:
        username:
          type: string
        img_id:
          type: string
        email:
          type: string
        translationsCount:
          type: number
        annotationsCount:
          type: number
        commentsCount:
          type: number
    UserInfo:
      type: object
      properties:
        username:
          type: string
        img_id:
          type: integer
        email:
          type: string
        activity:
          type: integer
    UserUpdateRequest:
      type: object
      properties:
        newUsername:
          type: string
        newImgId:
          type: integer
        newPassword:
          type: string
        newEmail:
          type: string
      required:
        - newUsername
        - newImgId
        - newPassword
        - newEmail
    Song:
      type: object
      properties:
        id:
          type: integer
        primary_translation:
          type: integer
        imageId:
          type: integer
        artist:
          type: string
        title:
          type: string
        link:
          type: string
    SongInput:
      type: object
      properties:
        title:
          type: string
        artist:
          type: string
        lyrics:
          type: string
        description:
          type: string
        language:
          type: string
        youtube-link:
          type: string
        imageId:
          type: integer
    SongUpdateInput:
      type: object
      properties:
        title:
          type: string
        artist:
          type: string
        youtube-link:
          type: string
    ImageModel:
      type: object
      properties:
        id:
          type: integer
          description: The ID of the image.
        link:
          type: string
          description: The link to the image.
        ext:
          type: string
          description: The extension of the image file.
      required:
        - id
        - link
        - ext
    Translation:
      type: object
      properties:
        id:
          type: integer
        songId:
          type: integer
        userId:
          type: integer
        language:
          type: string
        description:
          type: string
        lyrics:
          type: string
        no_views:
          type: integer
        time:
          type: string
          format: date-time
    TranslationUpdate:
      type: object
      properties:
        lyrics:
          type: string
          description: "The updated lyrics of the song translation"
        description:
          type: string
          description: "The updated description of the translation"
    Annotation:
      type: object
      properties:
        id:
          type: integer
        userId:
          type: integer
        translationId:
          type: integer
        beginPos:
          type: integer
        endPos:
          type: integer
        content:
          type: string
        reviewed:
          type: boolean
    AnnotationUpdate:
      type: object
      properties:
        content:
          type: string
          description: "The updated content of the annotation"
        reviewed:
          type: boolean
          description: "Whether the annotation is reviewed. Only an admin user can set this to true. If user is not an admin, this will be automatically set to false, regardless of the provided value."
  responses:
    Success:
      description: Operation Successfully Completed
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
    NotFound:
      description: Not Found
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
    UnprocessableEntity:
      description: Unprocessable Entity
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
    ConflictError:
      description: Conflict Error
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: jwt